package org.sindicato.entities;
// Generated 03-dic-2015 16:29:24 by Hibernate Tools 4.3.1


import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Usuario generated by hbm2java
 */
@Entity
@Table(name="usuario"
    ,schema="public"
    , uniqueConstraints = {@UniqueConstraint(columnNames="email"), @UniqueConstraint(columnNames="username")} 
)
public class Usuario  implements java.io.Serializable {


     private String id;
     private Rol rol;
     private String username;
     private String password;
     private Date fechaCreacion;
     private Date fechaUltimaModificacion;
     private boolean activo;
     private Date ultimaConexion;
     private String email;
     private Set registracionsForEmail = new HashSet(0);
     private Registracion registracionById;
     private Empresa empresa;

    public Usuario() {
    }

	
    public Usuario(String id, String username, String password, boolean activo, String email) {
        this.id = id;
        this.username = username;
        this.password = password;
        this.activo = activo;
        this.email = email;
    }
    public Usuario(String id, Rol rol, String username, String password, Date fechaCreacion, Date fechaUltimaModificacion, boolean activo, Date ultimaConexion, String email, Set registracionsForEmail, Registracion registracionById, Empresa empresa) {
       this.id = id;
       this.rol = rol;
       this.username = username;
       this.password = password;
       this.fechaCreacion = fechaCreacion;
       this.fechaUltimaModificacion = fechaUltimaModificacion;
       this.activo = activo;
       this.ultimaConexion = ultimaConexion;
       this.email = email;
       this.registracionsForEmail = registracionsForEmail;
       this.registracionById = registracionById;
       this.empresa = empresa;
    }
   
     @Id 

    
    @Column(name="id", unique=true, nullable=false, length=32)
    public String getId() {
        return this.id;
    }
    
    public void setId(String id) {
        this.id = id;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="id_rol")
    public Rol getRol() {
        return this.rol;
    }
    
    public void setRol(Rol rol) {
        this.rol = rol;
    }

    
    @Column(name="username", unique=true, nullable=false, length=32)
    public String getUsername() {
        return this.username;
    }
    
    public void setUsername(String username) {
        this.username = username;
    }

    
    @Column(name="password", nullable=false, length=40)
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="fecha_creacion", length=35)
    public Date getFechaCreacion() {
        return this.fechaCreacion;
    }
    
    public void setFechaCreacion(Date fechaCreacion) {
        this.fechaCreacion = fechaCreacion;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="fecha_ultima_modificacion", length=35)
    public Date getFechaUltimaModificacion() {
        return this.fechaUltimaModificacion;
    }
    
    public void setFechaUltimaModificacion(Date fechaUltimaModificacion) {
        this.fechaUltimaModificacion = fechaUltimaModificacion;
    }

    
    @Column(name="activo", nullable=false)
    public boolean isActivo() {
        return this.activo;
    }
    
    public void setActivo(boolean activo) {
        this.activo = activo;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="ultima_conexion", length=35)
    public Date getUltimaConexion() {
        return this.ultimaConexion;
    }
    
    public void setUltimaConexion(Date ultimaConexion) {
        this.ultimaConexion = ultimaConexion;
    }

    
    @Column(name="email", unique=true, nullable=false, length=75)
    public String getEmail() {
        return this.email;
    }
    
    public void setEmail(String email) {
        this.email = email;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="usuarioByEmail")
    public Set getRegistracionsForEmail() {
        return this.registracionsForEmail;
    }
    
    public void setRegistracionsForEmail(Set registracionsForEmail) {
        this.registracionsForEmail = registracionsForEmail;
    }

@OneToOne(fetch=FetchType.LAZY, mappedBy="usuarioById")
    public Registracion getRegistracionById() {
        return this.registracionById;
    }
    
    public void setRegistracionById(Registracion registracionById) {
        this.registracionById = registracionById;
    }

@OneToOne(fetch=FetchType.LAZY, mappedBy="usuario")
    public Empresa getEmpresa() {
        return this.empresa;
    }
    
    public void setEmpresa(Empresa empresa) {
        this.empresa = empresa;
    }




}


